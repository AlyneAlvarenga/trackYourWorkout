{"version":3,"sources":["firebase.js","WorkoutCard.js","Logs.js","FormAndCards.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","WorkoutCard","className","this","props","userObjects","map","obj","key","id","title","exercises","exercise","exerciseName","sets","reps","weight","rest","Provider","value","onClick","removeCard","updateCounter","isLogged","Component","Logs","to","counter","FormAndCards","onSubmit","handleSubmit","htmlFor","type","state","workoutPlanName","onChange","handleChange","disabled","isDisabled","name","placeholder","handleAddExercise","tempObjects","index","MainPage","App","e","preventDefault","singleExerciseObj","uuidv4","setState","alert","event","a","dbRef","database","length","ref","push","removeCheckmark","setTimeout","updatedUserObjects","userObject","update","objInState","target","card","child","remove","on","response","cardArray","forEach","item","val","basename","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.079f0acf.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase';\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB7ID-56ClOUnFDrLYFhh0ER5-JKLwi7iI\",\n  authDomain: \"workout-log-demo.firebaseapp.com\",\n  databaseURL: \"https://workout-log-demo.firebaseio.com\",\n  projectId: \"workout-log-demo\",\n  storageBucket: \"workout-log-demo.appspot.com\",\n  messagingSenderId: \"1045295415038\",\n  appId: \"1:1045295415038:web:a96565a5ec3c16c57bafaf\"\n};\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React, {Component} from 'react';\nimport { FaRegTimesCircle, FaCheckCircle } from 'react-icons/fa';\nimport { IconContext } from \"react-icons\";\n\nclass WorkoutCard extends Component {\n\n  render() {\n    //map over user objects array. each index holds an object\n    //access the unique key under obj.id\n    //access the exercises key which holds an array of exercises\n    //map over the exercises array to display all exercises on the page\n\n    return (\n      <div className=\"workoutCards\">\n        { \n          this.props.userObjects.map(obj => {\n            return (\n              <div key={obj.id} id={obj.id} className=\"singleCard\">\n                <h2>{obj.title}</h2>\n                {\n                  obj.exercises.map(exercise => {\n                    return (\n                      <div key={exercise.id} className=\"exercisesInCard\">\n                        <h3>{exercise.exerciseName}</h3>\n                        <p>{exercise.sets} x {exercise.reps}</p>\n                        <p>{exercise.weight}lbs</p>\n                        <p>{exercise.rest}\"</p>\n                      </div>\n                    )\n                  })\n                }\n                <IconContext.Provider value={{ className: 'deleteIcon' }}><button className=\"deleteButton\" onClick={() => { this.props.removeCard(obj.id) }}><FaRegTimesCircle /></button></IconContext.Provider>\n                <button className=\"logButton\" onClick={() => { this.props.updateCounter(obj) }}>Log this workout</button>\n                {\n                  obj.isLogged ?\n                    <div className=\"checkmarkIcon\">\n                      <IconContext.Provider value={{ className: 'checkmarkIcon' }}>\n                        <FaCheckCircle />\n                      </IconContext.Provider>\n                    </div>\n                    : null\n                }\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default WorkoutCard;","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaArrowCircleLeft } from 'react-icons/fa';\nimport { IconContext } from \"react-icons\";\n\nclass Logs extends Component {\n  render() {\n      return (\n        <div className=\"flexContainer\">\n          <div className=\"logWrapper\">\n          <h1>Log Counts</h1>\n            <div className=\"backToHomeWrapper\">\n              <IconContext.Provider value={{ className: 'reactIcons' }}>\n                <Link to=\"/trackYourWorkout\" className=\"backToHomeLink\"><FaArrowCircleLeft /> Back</Link>\n              </IconContext.Provider>\n            </div>\n            {this.props.userObjects.map((obj) => {\n              return (\n                <div key={obj.id} id={obj.id} className=\"eachLog\">\n                  <h2>{obj.title}</h2>\n                  <p>This workout plan has been logged {obj.counter} time(s).</p>\n                </div>\n              )\n              \n            })}\n          </div>\n        </div>\n      )\n  }\n}\n\nexport default Logs;","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaArrowCircleLeft } from 'react-icons/fa';\nimport { IconContext } from \"react-icons\";\n\nclass FormAndCards extends Component {\n  render() {\n    return(\n      <Fragment>\n        <div className=\"backToHomeWrapper\">\n          <IconContext.Provider value={{ className: 'reactIcons' }}>\n            <Link to=\"/trackYourWorkout\" className=\"backToHomeLink\"><FaArrowCircleLeft /> Back</Link>\n          </IconContext.Provider>\n        </div>\n      <div className=\"wrapper\">\n        <h1>Workout Plans</h1>\n        <div className=\"instructions\">\n          <ul>\n            <li>Create a name for your workout plan. This will be the title of your card.</li>\n            <li>Type in the first line of exercise, sets, reps, weight and rest, and click on \"Add another exercise.\"</li>\n            <li>The exercises you just added will appear just below the form.</li>\n            <li>Once you have added all your exercises, click on \"Create Card\" to create your workout plan.</li>\n            <li>On your card, you can click on \"Log this workout\" every time you complete that workout plan. You can check how many times you've logged your workout on the \"See Logged Workout Plans\" page.</li>\n          </ul>\n        </div>\n        <div className=\"createCard\">\n          <form onSubmit={this.props.handleSubmit}>\n            <label htmlFor=\"workoutPlan\" className=\"workoutPlanLabel\">Name of workout plan</label>\n            <input type=\"text\" value={this.props.state.workoutPlanName} onChange={this.props.handleChange} disabled={this.props.state.isDisabled} name=\"workoutPlanName\" placeholder=\"Workout plan\" id=\"workoutPlan\" />\n  \n            <label htmlFor=\"exercise\" className=\"visuallyhidden\">Name of the exercise</label>\n            <input type=\"text\" value={this.props.state.exerciseName} onChange={this.props.handleChange} name=\"exerciseName\" placeholder=\"Name of the exercise\" id=\"exercise\" />\n  \n            <label htmlFor=\"numberOfSets\" className=\"visuallyhidden\">Number of sets</label>\n            <input type=\"number\" value={this.props.state.sets} onChange={this.props.handleChange} name=\"sets\" id=\"numberOfSets\" placeholder=\"Sets\" />\n  \n            <label htmlFor=\"numberOfReps\" className=\"visuallyhidden\">Number of reps</label>\n            <input type=\"number\" value={this.props.state.reps} onChange={this.props.handleChange} name=\"reps\" id=\"numberOfReps\" placeholder=\"Reps\" />\n  \n            <label htmlFor=\"howMuchWeight\" className=\"visuallyhidden\">How much weight are you using</label>\n            <input type=\"number\" value={this.props.state.weight} onChange={this.props.handleChange} name=\"weight\" id=\"howMuchWeight\" placeholder=\"Weight\" />\n  \n            <label htmlFor=\"restDuration\" className=\"visuallyhidden\">How long is your rest</label>\n            <input type=\"number\" value={this.props.state.rest} onChange={this.props.handleChange} name=\"rest\" id=\"restDuration\" placeholder=\"Rest\" />\n  \n            <button onClick={this.props.handleAddExercise} className=\"addExerciseButton\">Add exercise</button>\n            <button type=\"submit\">Create Card</button>\n          </form>\n          {\n            this.props.state.tempObjects.map((obj, index) => {\n              return (\n                <div key={index} className=\"exerciseLine\">\n                  <p>{obj.exerciseName}</p>\n                  <p>{obj.sets} x {obj.reps}</p>\n                  <p>{obj.weight}lbs</p>\n                  <p>{obj.rest}\"</p>\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default FormAndCards;","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\n\nclass MainPage extends Component {\n\n  render() {\n    return (\n      <div className=\"flexContainer\">\n        <div className=\"mainPage\">\n          <h1>Track Your Workouts</h1>\n          <div>\n            <p>Keep track of all your workout plans! Create as many cards as you need, and see how many times you've completed each plan.</p>\n            <p>Click on \"Create/View Workout Plan\" to begin. If you want to see how many times you've completed a plan, click on \"See Logged Workout Plans\".</p>\n          </div>\n          <Link to=\"/workouts/\" className=\"mainPageLinks\">Create/View Workout Plan</Link>\n          <Link to=\"/logs/\" className=\"mainPageLinks\">See Logged Workout Plans</Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MainPage;","import React, {Component, Fragment} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport firebase from './firebase';\nimport WorkoutCard from './WorkoutCard.js';\nimport Logs from './Logs';\nimport FormAndCards from './FormAndCards';\nimport MainPage from './MainPage';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { FaCheckCircle } from 'react-icons/fa';\nimport { IconContext } from \"react-icons\";\n\nclass App extends Component {\n  constructor() {\n    super(); \n    \n    this.state = {\n        userObjects: [],\n        tempObjects: [],\n        exerciseName: '',\n        workoutPlanName: '',\n        reps: '',\n        sets: '',\n        weight: '',\n        rest: '',\n        isDisabled: false,\n        // isClicked: false,\n      }\n    };\n  \n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      const cardArray = [];\n      \n      response.forEach(item => {\n        cardArray.push({\n          id: item.key,\n          exercises: item.val().exercises,\n          title: item.val().exercises[0].workoutPlanName,\n          counter: item.val().counter,\n        })\n      })\n\n      this.setState({\n        userObjects: cardArray,\n        tempObjects: [],\n        workoutPlanName: '',\n      })\n    });\n  }\n\n  handleAddExercise = (e) => {\n    e.preventDefault();\n\n    if (this.state.workoutPlanName !== '' && this.state.exerciseName !== '' && this.state.sets !== '' && this.state.reps !== '' && this.state.weight !== '' && this.state.rest !== '') {\n      const singleExerciseObj = {\n        exerciseName: this.state.exerciseName,\n        workoutPlanName: this.state.workoutPlanName,\n        reps: this.state.reps,\n        sets: this.state.sets,\n        weight: this.state.weight,\n        rest: this.state.rest,\n        id: uuidv4(),\n      }\n  \n      this.setState({\n        tempObjects: [...this.state.tempObjects, singleExerciseObj],\n        exerciseName: '',\n        reps: '',\n        sets: '',\n        weight: '',\n        rest: '',\n        isDisabled: true,\n      })\n    } else {\n      alert('Please fill out all fields before clicking \"Add Exercise\"!');\n    }\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    \n    const dbRef = firebase.database();\n\n    if (this.state.tempObjects.length >= 1) {\n      dbRef.ref().push({ exercises: this.state.tempObjects, counter: 0, isLogged: false});\n  \n      this.setState({\n        isDisabled: false,\n      })\n    } else {\n      alert('Please add at least one exercise to your card!');\n    }\n\n  }\n\n  removeCheckmark = (obj) => {\n    setTimeout(() => {\n      const updatedUserObjects = this.state.userObjects.map(userObject => {\n        if (userObject.id === obj.id) {\n          firebase.database().ref(`${userObject.id}`).update({isLogged: false})\n          return {\n            ...userObject,\n            isLogged: false,\n          }\n        }\n        return userObject;\n      })\n      this.setState({\n        userObjects: updatedUserObjects,\n      })\n    }, 2000)\n  }\n\n  updateCounter = (objInState) => {\n    const updatedUserObjects = this.state.userObjects.map(userObject => {\n      if(userObject.id === objInState.id) {\n        firebase.database().ref(`${userObject.id}`).update({counter: userObject.counter + 1, isLogged: true});\n\n        return {\n          ...userObject, \n          counter: userObject.counter += 1,\n          isLogged: true\n        }\n      }\n      return userObject;\n    });\n    \n    this.setState({\n      userObjects: updatedUserObjects,\n    }, () => {\n        this.removeCheckmark(objInState);\n    })\n  }\n\n  handleChange = (e) => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  removeCard = (card) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(card).remove();\n  }\n\n\n  render() {\n    return (\n      <Router basename=\"/\">\n        <Switch>\n        <Route exact path=\"/trackYourWorkout\" component={MainPage} />\n          \n          <Route path=\"/workouts/\" render={() => {\n            return (\n              <Fragment>\n                <FormAndCards \n                  state={this.state}\n                  handleChange={this.handleChange}\n                  handleAddExercise={this.handleAddExercise}\n                  handleSubmit={this.handleSubmit}\n                />\n                <WorkoutCard\n                  userObjects={this.state.userObjects}\n                  // isClicked={this.state.isClicked}\n                  removeCard={this.removeCard}\n                  updateCounter={this.updateCounter}\n                />\n              </Fragment>\n            )}}\n          />\n\n          <Route path=\"/logs/\" render={() => {\n            return (\n              <Logs\n                userObjects={this.state.userObjects}\n              />\n            )}} \n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}