{"version":3,"sources":["firebase.js","Components/WorkoutCard.js","Components/Header.js","Components/Logs.js","Components/FormAndCards.js","Components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","WorkoutCard","className","this","props","userObjects","map","obj","key","id","title","exercises","exercise","exerciseName","sets","reps","weight","rest","Provider","value","onClick","removeCard","updateCounter","isLogged","Component","Header","location","useLocation","history","useHistory","pathname","to","currentUserEmail","push","handleLogOut","Logs","counter","FormAndCards","state","onSubmit","handleSubmit","htmlFor","type","workoutPlanName","onChange","handleChange","disabled","isDisabled","name","placeholder","handleAddExercise","tempObjects","index","MainPage","isSignedIn","currentUser","handleAnonSignIn","handleSignUp","signUpEmail","required","signUpPassword","handleSignIn","signInEmail","signInPassword","App","e","preventDefault","singleExerciseObj","uuidv4","setState","alert","event","a","dbRef","database","length","ref","removeCheckmark","setTimeout","updatedUserObjects","userObject","update","objInState","target","card","child","remove","auth","signInAnonymously","then","response","isGuest","catch","error","console","log","createUserWithEmailAndPassword","err","errorCode","code","errorMessage","message","signInWithEmailAndPassword","signOut","onAuthStateChanged","user","uid","email","on","cardArray","forEach","item","val","basename","exact","path","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fddbe43.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase';\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB7ID-56ClOUnFDrLYFhh0ER5-JKLwi7iI\",\n  authDomain: \"workout-log-demo.firebaseapp.com\",\n  databaseURL: \"https://workout-log-demo.firebaseio.com\",\n  projectId: \"workout-log-demo\",\n  storageBucket: \"workout-log-demo.appspot.com\",\n  messagingSenderId: \"1045295415038\",\n  appId: \"1:1045295415038:web:a96565a5ec3c16c57bafaf\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React, {Component} from 'react';\nimport { FaRegTimesCircle, FaCheckCircle } from 'react-icons/fa';\nimport { IconContext } from \"react-icons\";\n\nclass WorkoutCard extends Component {\n\n  render() {\n    //map over user objects array. each index holds an object\n    //access the unique key under obj.id\n    //access the exercises key which holds an array of exercises\n    //map over the exercises array to display all exercises on the page\n\n    return (\n      <section className=\"workoutCards\">\n        { \n          this.props.userObjects.map(obj => {\n            return (\n              <div key={obj.id} id={obj.id} className=\"singleCard\">\n                <h2>{obj.title}</h2>\n                {\n                  obj.exercises.map(exercise => {\n                    return (\n                      <div key={exercise.id} className=\"exercisesInCard\">\n                        <h3>{exercise.exerciseName}</h3>\n                        <p>{exercise.sets} x {exercise.reps}</p>\n                        <p>{exercise.weight}lbs</p>\n                        <p>{exercise.rest}\"</p>\n                      </div>\n                    )\n                  })\n                }\n                <IconContext.Provider value={{ className: 'deleteIcon' }}><button className=\"deleteButton\" onClick={() => { this.props.removeCard(obj.id) }}><FaRegTimesCircle /></button></IconContext.Provider>\n                <button className=\"logButton\" onClick={() => { this.props.updateCounter(obj) }}>Log this workout</button>\n                {\n                  obj.isLogged ?\n                    <div className=\"checkmarkIcon\">\n                      <IconContext.Provider value={{ className: 'checkmarkIcon' }}>\n                        <FaCheckCircle />\n                      </IconContext.Provider>\n                    </div>\n                    : null\n                }\n              </div>\n            )\n          })\n        }\n      </section>\n    )\n  }\n}\n\nexport default WorkoutCard;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaArrowCircleLeft } from 'react-icons/fa';\nimport { IconContext } from \"react-icons\";\nimport { useLocation, useHistory } from 'react-router-dom';\n\nfunction Header(props) {\n\n  let location = useLocation();\n\n  const history = useHistory();\n\n  const startLogOut = () => {\n    history.push('/trackYourWorkout');\n    props.handleLogOut();\n  }\n\n  return (\n    <header>\n      <div className=\"headerWrapper\">\n        {\n          location.pathname !== '/trackYourWorkout' ?\n            <div className=\"backToHomeWrapper\">\n              <IconContext.Provider value={{ className: 'reactIcons' }}>\n                <Link to=\"/trackYourWorkout\" className=\"backToHomeLink\"><FaArrowCircleLeft /> Back</Link>\n              </IconContext.Provider>\n            </div>\n          : null\n        }\n        <h3>You are logged in as {props.currentUserEmail ? props.currentUserEmail : \"Guest\"}</h3>\n        <button onClick={startLogOut}>Log Out</button>\n      </div>\n    </header>\n  )\n}\n\nexport default Header;","import React, {Fragment} from 'react';\nimport Header from './Header';\n\nfunction Logs(props) {\n  return (\n    <Fragment>\n      <Header \n        handleLogOut={props.handleLogOut}\n        currentUserEmail={props.currentUserEmail}\n      />\n      <div className=\"flexContainerSignedIn\">\n        <div className=\"logWrapper\">\n        <h1>Log Counts</h1>\n          <div className=\"logFlexContainer\">\n          {props.userObjects.map((obj) => {\n            return (\n              <div key={obj.id} id={obj.id} className=\"eachLog\">\n                <h2>{obj.title}</h2>\n                <p>This workout plan has been logged {obj.counter} time(s).</p>\n              </div>\n            )\n          })}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Logs;","import React, { Component, Fragment } from 'react';\nimport Header from './Header';\n\nclass FormAndCards extends Component {\n  render() {\n    return(\n      <Fragment>\n        <Header \n          currentUserEmail={this.props.state.currentUserEmail}\n          handleLogOut={this.props.handleLogOut}\n        />\n      <section className=\"wrapper\">\n        <h1>Workout Plans</h1>\n        <div className=\"instructions\">\n          <ul>\n            <li>Create a name for your workout plan. This will be the title of your card.</li>\n            <li>Type in the first line of exercise, sets, reps, weight and rest, and click on \"Add another exercise.\"</li>\n            <li>The exercises you just added will appear just below the form.</li>\n            <li>Once you have added all your exercises, click on \"Create Card\" to create your workout plan.</li>\n            <li>On your card, you can click on \"Log this workout\" every time you complete that workout plan. You can check how many times you've logged your workout on the \"See Logged Workout Plans\" page.</li>\n          </ul>\n        </div>\n        <div className=\"createCard\">\n          <form onSubmit={this.props.handleSubmit}>\n            <label htmlFor=\"workoutPlan\" className=\"workoutPlanLabel\">Name of workout plan</label>\n            <input type=\"text\" value={this.props.state.workoutPlanName} onChange={this.props.handleChange} disabled={this.props.state.isDisabled} name=\"workoutPlanName\" placeholder=\"Workout plan\" id=\"workoutPlan\" />\n  \n            <label htmlFor=\"exercise\" className=\"visuallyhidden\">Name of the exercise</label>\n            <input type=\"text\" value={this.props.state.exerciseName} onChange={this.props.handleChange} name=\"exerciseName\" placeholder=\"Name of the exercise\" id=\"exercise\" />\n  \n            <label htmlFor=\"numberOfSets\" className=\"visuallyhidden\">Number of sets</label>\n            <input type=\"number\" value={this.props.state.sets} onChange={this.props.handleChange} name=\"sets\" id=\"numberOfSets\" placeholder=\"Sets\" />\n  \n            <label htmlFor=\"numberOfReps\" className=\"visuallyhidden\">Number of reps</label>\n            <input type=\"number\" value={this.props.state.reps} onChange={this.props.handleChange} name=\"reps\" id=\"numberOfReps\" placeholder=\"Reps\" />\n  \n            <label htmlFor=\"howMuchWeight\" className=\"visuallyhidden\">How much weight are you using</label>\n            <input type=\"number\" value={this.props.state.weight} onChange={this.props.handleChange} name=\"weight\" id=\"howMuchWeight\" placeholder=\"Weight\" />\n  \n            <label htmlFor=\"restDuration\" className=\"visuallyhidden\">How long is your rest</label>\n            <input type=\"number\" value={this.props.state.rest} onChange={this.props.handleChange} name=\"rest\" id=\"restDuration\" placeholder=\"Rest\" />\n  \n            <button onClick={this.props.handleAddExercise} className=\"addExerciseButton\">Add exercise</button>\n            <button type=\"submit\">Create Card</button>\n          </form>\n          {\n            this.props.state.tempObjects.map((obj, index) => {\n              return (\n                <div key={index} className=\"exerciseLine\">\n                  <p>{obj.exerciseName}</p>\n                  <p>{obj.sets} x {obj.reps}</p>\n                  <p>{obj.weight}lbs</p>\n                  <p>{obj.rest}\"</p>\n                </div>\n              )\n            })\n          }\n        </div>\n      </section>\n      </Fragment>\n    )\n  }\n}\n\nexport default FormAndCards;","import React, {Component, Fragment} from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from './Header';\n\nclass MainPage extends Component {\n\n  render() {\n    return (\n      <main>\n        {\n          this.props.state.isSignedIn && this.props.state.currentUser ?\n          <Fragment>\n            <Header \n              currentUserEmail={this.props.state.currentUserEmail} \n              handleLogOut={this.props.handleLogOut}\n            />\n            <div className=\"flexContainerSignedIn\">\n              <div className=\"mainPage\">\n                <h1>Track Your Workouts</h1>\n                <div>\n                  <p>Keep track of all your workout plans! Create multiple cards with as many exercises as you need. You can keep track of how many times you've completed the plan in each card, so you know when it's time to change your routine.</p>\n                  <p>Click on \"Create/View Workout Plan\" to create your first card. To see how many times you've completed a specific plan, click on \"See Logged Workout Plans\".</p>\n                </div>\n                <Link to=\"/workouts/\" className=\"mainPageLinks\">Create/View Workout Plan</Link>\n                <Link to=\"/logs/\" className=\"mainPageLinks\">See Logged Workout Plans</Link>\n              </div>\n            </div>\n          </Fragment>\n          : \n            <div className=\"flexContainerLoggedOut\">\n              <main className=\"mainPage\">\n                <h1>Track Your Workouts</h1>\n                <p>Keep track of all your workout plans! Create multiple cards with as many exercises as you need. You can keep track of how many times you've completed the plan in each card, so you know when it's time to change your routine.</p>\n                <p>Log in or sign up to get started. To log in as a guest, <button className=\"guestLogin\" onClick={this.props.handleAnonSignIn}>click here</button>.</p>\n                <div className=\"formPage\">\n                  <div className=\"signUpContainer\">\n                    <h2>Sign Up</h2>\n                    <form onSubmit={this.props.handleSignUp} className=\"signUpSignInForm\">\n                      <label htmlFor=\"signUpEmail\" className=\"visuallyhidden\">Email address</label>\n                      <input id=\"signUpEmail\" type=\"email\" placeholder=\"Email\" value={this.props.state.signUpEmail} name=\"signUpEmail\" onChange={this.props.handleChange} required />\n    \n                      <label htmlFor=\"signUpPassword\" className=\"visuallyhidden\">Password</label>\n                      <input id=\"signUpPassword\" type=\"password\" placeholder=\"Password\" value={this.props.state.signUpPassword} name=\"signUpPassword\" onChange={this.props.handleChange} required />\n                      <button type=\"submit\">Sign Up</button>\n                    </form>\n                  </div>\n    \n                  <div className=\"signInContainer\">\n                    <h2>Sign In</h2>\n                    <form onSubmit={this.props.handleSignIn} className=\"signUpSignInForm\">\n                      <label htmlFor=\"signInEmail\" className=\"visuallyhidden\">Email address</label>\n                      <input id=\"signInEmail\" type=\"email\" placeholder=\"Email\" value={this.props.state.signInEmail} name=\"signInEmail\" onChange={this.props.handleChange} required />\n    \n                      <label htmlFor=\"signInPassword\" className=\"visuallyhidden\">Password</label>\n                      <input id=\"signInPassword\" type=\"password\" placeholder=\"Password\" value={this.props.state.signInPassword} name=\"signInPassword\" onChange={this.props.handleChange} required />\n                      <button type=\"submit\">Sign In</button>\n                    </form>\n                  </div>\n  \n                </div> {/* /.formPage */}\n              </main>\n            </div> //.flexContainer\n        }\n      </main>\n    )\n  }\n}\n\nexport default MainPage;","import React, {Component, Fragment} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport firebase from './firebase';\nimport WorkoutCard from './Components/WorkoutCard.js';\nimport Logs from './Components/Logs';\nimport FormAndCards from './Components/FormAndCards';\nimport MainPage from './Components/MainPage';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n  constructor() {\n    super(); \n    \n    this.state = {\n        userObjects: [],\n        tempObjects: [],\n        exerciseName: '',\n        workoutPlanName: '',\n        reps: '',\n        sets: '',\n        weight: '',\n        rest: '',\n        isDisabled: false,\n        signUpEmail: '',\n        signUpPassword: '',\n        signInEmail: '',\n        signInPassword: '',\n        isSignedIn: false,\n        currentUser: null,\n        currentUserEmail: '',\n        isGuest: false,\n      }\n    };\n  \n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          isSignedIn: true,\n          currentUser: user.uid,\n          currentUserEmail: user.email,\n        }, () => {\n            const dbRef = firebase.database().ref(`${this.state.currentUser}`);\n            dbRef.on('value', (response) => {\n              const cardArray = [];\n\n              response.forEach(item => {\n                cardArray.push({\n                  id: item.key,\n                  exercises: item.val().exercises,\n                  title: item.val().exercises[0].workoutPlanName,\n                  counter: item.val().counter,\n                })\n              })\n\n              this.setState({\n                userObjects: cardArray,\n                tempObjects: [],\n                workoutPlanName: '',\n              })\n            });\n        })\n\n      }\n    })\n  }\n\n  // when a user is logged in and wants to start adding exercises to create a card\n  handleAddExercise = (e) => {\n    e.preventDefault();\n\n    if (this.state.workoutPlanName !== '' && this.state.exerciseName !== '' && this.state.sets !== '' && this.state.reps !== '' && this.state.weight !== '' && this.state.rest !== '') {\n      const singleExerciseObj = {\n        exerciseName: this.state.exerciseName,\n        workoutPlanName: this.state.workoutPlanName,\n        reps: this.state.reps,\n        sets: this.state.sets,\n        weight: this.state.weight,\n        rest: this.state.rest,\n        id: uuidv4(),\n      }\n  \n      this.setState({\n        tempObjects: [...this.state.tempObjects, singleExerciseObj],\n        exerciseName: '',\n        reps: '',\n        sets: '',\n        weight: '',\n        rest: '',\n        isDisabled: true,\n      })\n    } else {\n      alert('Please fill out all fields before clicking \"Add Exercise\"!');\n    }\n  }\n\n  // when a user is logged in and wants to create a card \n  handleSubmit = async (event) => {\n    event.preventDefault();\n    \n    const dbRef = firebase.database();\n\n    if (this.state.tempObjects.length >= 1) {\n      dbRef.ref(`${this.state.currentUser}`).push({ exercises: this.state.tempObjects, counter: 0, isLogged: false});\n  \n      this.setState({\n        isDisabled: false,\n      })\n    } else {\n      alert('Please add at least one exercise to your card!');\n    }\n\n  }\n\n  // when a user is logged in, and clicked on the log workout button, this will remove the checkmark icon after two seconds\n  removeCheckmark = (obj) => {\n    setTimeout(() => {\n      const updatedUserObjects = this.state.userObjects.map(userObject => {\n        if (userObject.id === obj.id) {\n          const id = userObject.id;\n\n          firebase.database().ref(`${this.state.currentUser}/${id}`).update({isLogged: false})\n          return {\n            ...userObject,\n            isLogged: false,\n          }\n        }\n        return userObject;\n      })\n      this.setState({\n        userObjects: updatedUserObjects,\n      })\n    }, 2000)\n  }\n\n  // when a user is logged in and clicks on log workout, this will update the counter in firebase, display the checkmark icon and trigger the function to remove the checkmark\n  updateCounter = (objInState) => {\n    const updatedUserObjects = this.state.userObjects.map(userObject => {\n      const id = userObject.id;\n\n      if(userObject.id === objInState.id) {\n        firebase.database().ref(`${this.state.currentUser}/${id}`).update({counter: userObject.counter + 1, isLogged: true});\n\n        return {\n          ...userObject, \n          counter: userObject.counter += 1,\n          isLogged: true\n        }\n      }\n      return userObject;\n    });\n    \n    this.setState({\n      userObjects: updatedUserObjects,\n    }, () => {\n        this.removeCheckmark(objInState);\n    })\n  }\n\n  // tracking inputs throughout the app and updating state\n  handleChange = (e) => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  // when a user is logged in and wants to delete a card\n  removeCard = (card) => {\n    const dbRef = firebase.database().ref(`${this.state.currentUser}`);\n\n    dbRef.child(card).remove();\n  }\n\n  // when a user wants to sign in as a guest (anonymous)\n  handleAnonSignIn = () => {\n    firebase.auth().signInAnonymously().then(response => {\n      this.setState({\n        isGuest: true,\n      })\n      \n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  // when a new user signs up\n  handleSignUp = (e) => {\n    e.preventDefault();\n\n    firebase.auth().createUserWithEmailAndPassword(this.state.signUpEmail, this.state.signUpPassword).then( (response) => {\n\n      this.setState({\n        signUpEmail: '',\n        signUpPassword: '',\n      })\n    }).catch(err => {\n      const errorCode = err.code;\n      const errorMessage = err.message;\n\n      if (errorCode === 'auth/weak-password') {\n        alert('The password is too weak. Please use at least 6 characters.');\n      } else if (errorCode === 'auth/email-already-in-use') {\n        alert('This email has already been used to sign up. Please sign in with your email and password.')\n      } else if (errorCode === 'auth/invalid-email') {\n        alert('Please use a valid email address');\n      } else {\n        alert(errorMessage);\n      }\n\n      this.setState({\n        signUpEmail: '',\n        signUpPassword: '',\n      })\n    });\n  }\n\n  // when a returning user signs in\n  handleSignIn = (e) => {\n    e.preventDefault();\n    \n    firebase.auth().signInWithEmailAndPassword(this.state.signInEmail, this.state.signInPassword).then(() => {\n        this.setState({\n          signInEmail: '',\n          signInPassword: '',\n        })\n\n    }).catch(() => {\n      alert('You have entered an invalid email and password combination. Please try again.');\n\n      this.setState({\n        signInEmail: '',\n        signInPassword: '',\n      })\n      \n    })\n  }\n\n  // when a user is logged in and wants to log out\n  handleLogOut = () => {\n    firebase.auth().signOut();\n\n    this.setState({\n      isGuest: false,\n      isSignedIn: false,\n      currentUserEmail: '',\n      currentUser: null,\n      userObjects: [],\n    })\n  }\n\n\n  render() {\n    return (\n      <Router basename=\"/\">\n        <Switch>\n        <Route exact path=\"/trackYourWorkout\" render={() => {\n          return (\n            <MainPage \n              state={this.state}\n              handleChange={this.handleChange}\n              handleAnonSignIn={this.handleAnonSignIn}\n              handleSignUp={this.handleSignUp}\n              handleLogOut={this.handleLogOut}\n              handleSignIn={this.handleSignIn}\n            />\n          )\n        }} />\n          \n          <Route path=\"/workouts/\" render={() => {\n            return (\n              <Fragment>\n                <FormAndCards \n                  state={this.state}\n                  handleChange={this.handleChange}\n                  handleAddExercise={this.handleAddExercise}\n                  handleSubmit={this.handleSubmit}\n                  handleLogOut={this.handleLogOut}\n                />\n                <WorkoutCard\n                  userObjects={this.state.userObjects}\n                  removeCard={this.removeCard}\n                  updateCounter={this.updateCounter}\n                />\n              </Fragment>\n            )}}\n          />\n\n          <Route path=\"/logs/\" render={() => {\n            return (\n              <Logs\n                userObjects={this.state.userObjects}\n                handleLogOut={this.handleLogOut}\n                currentUserEmail={this.state.currentUserEmail}\n              />\n            )}} \n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}